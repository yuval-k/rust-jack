initSidebarItems({"mod":[["port_flags","Contains flag constants that may be used to create `PortFlags`."]],"struct":[["AudioInPort","Safely and thinly wrap a `Port<AudioInSpec>`. Derefs into a `&[f32]`."],["AudioInSpec","`AudioInSpec` implements the `PortSpec` trait which, defines an endpoint for JACK. In this case, it is a readable 32 bit floating point buffer for audio."],["AudioOutPort","Safely and thinly wrap a `Port<AudioOutSpec>`. Derefs into a `&mut[f32]`."],["AudioOutSpec","`AudioOutSpec` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it is a mutable 32 bit floating point buffer for audio."],["MidiInPort","Safely and thinly wrap a `Port<MidiInPort>`."],["MidiInSpec","`MidiInSpec` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it defines midi input."],["MidiIter","Iterate through Midi Messages within a `MidiInPort`."],["MidiOutPort","Safely and thinly wrap a `Port<MidiInPort>`."],["MidiOutSpec","`MidiOutSpec` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it defines a midi output."],["PORT_NAME_SIZE","The maximum string length for port names."],["PORT_TYPE_SIZE","The maximum string length for jack type names."],["Port","An endpoint to interact with JACK data streams, for audio, midi, etc..."],["RawMidi","Contains 8bit raw midi information along with a timestamp relative to the process cycle."],["Unowned","`PortSpec` for a port that holds has no readable or writeable data from JACK on the created client. It can be used for obtaining information about external ports."]],"trait":[["PortSpec","Defines the configuration for a certain port to JACK, ie 32 bit floating audio input, 8 bit raw midi output, etc..."]],"type":[["UnownedPort","`Port<UnownedSpec>` - Port that holds no data from Jack, though it can still be used to query information."]]});